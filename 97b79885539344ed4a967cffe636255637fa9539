{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "cfa2feba_40cd2a5e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-10T22:46:15Z",
      "side": 1,
      "message": "(style) Is it just me or are you commit messages wrapped at like 50 chars?\n\nIt\u0027s actually fine to go up to 72 on the commit message itself.\n\nSome projects enforce shorter titles, but I don\u0027t feel too bad going over 65 chars when required.\n\nI noticed the same thing on Yoann\u0027s patches.",
      "revId": "97b79885539344ed4a967cffe636255637fa9539",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba419f73_4079d101",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-10T22:46:15Z",
      "side": 1,
      "message": "(nit++) gnu-find calls those \"predicates\" rather than options\n\nThat\u0027s really not important, but I think I used it in a few places in the project, feel free to use it, or not.",
      "range": {
        "startLine": 7,
        "startChar": 21,
        "endLine": 7,
        "endChar": 27
      },
      "revId": "97b79885539344ed4a967cffe636255637fa9539",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40f42f67_c705cfa7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-10T22:46:15Z",
      "side": 1,
      "message": "(minor) Could you also add that the option is deprecated by gnu-find so that it\u0027s clear that we are not leaving anything on the table here.",
      "revId": "97b79885539344ed4a967cffe636255637fa9539",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "59879ad4_640428cc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-10T22:46:15Z",
      "side": 1,
      "message": "I haven\u0027t reviewed everything because it\u0027s getting too late to keep going, I\u0027ll try to finish it during the weekend.",
      "revId": "97b79885539344ed4a967cffe636255637fa9539",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b71d3220_3c7e9884",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2021-06-11T08:18:33Z",
      "side": 1,
      "message": "Thanks for taking the time to read my patch. As I said in one of the comments, I implemented this feature in Lustre\u0027s lfs find. The parsing the mode and the tests are an adaptation from this patch.\n\nUnfortunately, I can\u0027t update this patch today so I replied to a few of your comments that needed a response. The update will have to wait for Monday.",
      "revId": "97b79885539344ed4a967cffe636255637fa9539",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8f51336_f703cb3b",
        "filename": "include/filters.h",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-10T22:46:15Z",
      "side": 1,
      "message": "(style) we don\u0027t use typing suffix in general in rbh-v4 (ie. hungarian notation).",
      "range": {
        "startLine": 79,
        "startChar": 24,
        "endLine": 79,
        "endChar": 31
      },
      "revId": "97b79885539344ed4a967cffe636255637fa9539",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64328667_abeebcbb",
        "filename": "src/filters.c",
        "patchSetId": 1
      },
      "lineNbr": 204,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-10T22:46:15Z",
      "side": 1,
      "message": "(major) the function is too long",
      "revId": "97b79885539344ed4a967cffe636255637fa9539",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d82cb91b_2ba2d63d",
        "filename": "src/filters.c",
        "patchSetId": 1
      },
      "lineNbr": 210,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-10T22:46:15Z",
      "side": 1,
      "message": "(nit) stx_mode is a __u16 in statx\u0027s man page, which tells me that a uint16_t would also be fine here. Or you could use mode_t ðŸ˜Š",
      "range": {
        "startLine": 210,
        "startChar": 4,
        "endLine": 210,
        "endChar": 12
      },
      "revId": "97b79885539344ed4a967cffe636255637fa9539",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad287f65_ca5df4de",
        "filename": "src/filters.c",
        "patchSetId": 1
      },
      "lineNbr": 210,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2021-06-11T08:18:33Z",
      "side": 1,
      "message": "I wanted to use mode_t but there is no 16 bits filter implementation. So I used a 32 bits filter and I wanted to be consistent with that. But there is no harm in putting mode_t in the helper functions.",
      "parentUuid": "d82cb91b_2ba2d63d",
      "range": {
        "startLine": 210,
        "startChar": 4,
        "endLine": 210,
        "endChar": 12
      },
      "revId": "97b79885539344ed4a967cffe636255637fa9539",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f26c3d80_054e173d",
        "filename": "src/filters.c",
        "patchSetId": 1
      },
      "lineNbr": 213,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-10T22:46:15Z",
      "side": 1,
      "message": "(minor) I am not a fan of this `loop` variable. You should be able to get rid of it if you extract the switch statements into dedicated functions.\n\nAlso in this case, I would prefer a boolean.",
      "range": {
        "startLine": 213,
        "startChar": 8,
        "endLine": 213,
        "endChar": 12
      },
      "revId": "97b79885539344ed4a967cffe636255637fa9539",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d72f39b5_2aa17940",
        "filename": "src/filters.c",
        "patchSetId": 1
      },
      "lineNbr": 247,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-10T22:46:15Z",
      "side": 1,
      "message": "(minor) I think it would be useful leave a comment to explain how umask gets mixed into this. I mean, I can try to guess, but I\u0027d rather have the explanation from the person who wrote the code firsthand.",
      "revId": "97b79885539344ed4a967cffe636255637fa9539",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "641587a3_2daec84f",
        "filename": "src/filters.c",
        "patchSetId": 1
      },
      "lineNbr": 247,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2021-06-11T08:18:33Z",
      "side": 1,
      "message": "who is the denomination in the posix documentation for chmod. It represents the characters before the operation in the middle (e.g. [/-][who][+\u003d-][perm]). If who is empty, the permission `perm` applies to user, group and other without the bits in umask. I\u0027ll add a comment to explain that.",
      "parentUuid": "d72f39b5_2aa17940",
      "revId": "97b79885539344ed4a967cffe636255637fa9539",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfea1705_18a0e432",
        "filename": "src/filters.c",
        "patchSetId": 1
      },
      "lineNbr": 247,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-12T10:10:57Z",
      "side": 1,
      "message": "I read POSIX\u0027s spec for find [0] and haven\u0027t found a trace of umask beyond:\n\n\u003e To start, a template shall be assumed with all file mode bits cleared. An op symbol of \u0027+\u0027 shall set the appropriate mode bits in the template; \u0027-\u0027 shall clear the appropriate bits; \u0027\u003d\u0027 shall set the appropriate mode bits, without regard to the contents of the file mode creation mask of the process.\n\nWhich I interpret as \"don\u0027t mix umask into this\". ðŸ˜Š\n\nI also read the code in gnu-find that parses mode strings [1] [2] [3], and it looks like it follows POSIX to the letter (at least regarding the value of umask).\n\n[0] https://pubs.opengroup.org/onlinepubs/9699919799/utilities/find.html\n[1] https://git.savannah.gnu.org/cgit/findutils.git/tree/find/parser.c#n1833\n[2] https://git.savannah.gnu.org/cgit/gnulib.git/tree/lib/modechange.c#n133\n[3] https://git.savannah.gnu.org/cgit/gnulib.git/tree/lib/modechange.c#n338",
      "parentUuid": "641587a3_2daec84f",
      "revId": "97b79885539344ed4a967cffe636255637fa9539",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee8ace3f_dcddb2ce",
        "filename": "src/filters.c",
        "patchSetId": 1
      },
      "lineNbr": 247,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2021-06-14T07:14:18Z",
      "side": 1,
      "message": "Yes, after a discussion with Sebastien last friday, I did a test and it turns out that `find` doesn\u0027t use the umask. I was focused on the fact that the symbolic representation is defined by the man page of `chmod` and copied it\u0027s behavior.\n\nIn the following: `touch file; chmod +rwx file; find -perm +rwx file`, the find command will not display \"file\" which I find odd. `+rwx` means `777 \u0026 ~umask` for chmod and just `777` for find.",
      "parentUuid": "dfea1705_18a0e432",
      "revId": "97b79885539344ed4a967cffe636255637fa9539",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc90e9a9_6f3d6521",
        "filename": "src/filters.c",
        "patchSetId": 1
      },
      "lineNbr": 252,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-10T22:46:15Z",
      "side": 1,
      "message": "(minor) meh...\n\nThe man page for umask(2) says that you can get the value from /proc/self/status, but it sounds like a lot of work for not a lot of gain.\n\nYou could also do some complicated stuff to fork the current process, but I am not quite sure if that\u0027d be any better.\n\nOne way that would be a little bit safer and not too much work would be to use a destructor to make sure the umask is properly reset unless the process is SIGKILL-ed. You would probably want to use a constructor to get the initial value as well.",
      "range": {
        "startLine": 250,
        "startChar": 8,
        "endLine": 252,
        "endChar": 26
      },
      "revId": "97b79885539344ed4a967cffe636255637fa9539",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df0fb9da_7d18b381",
        "filename": "src/filters.c",
        "patchSetId": 1
      },
      "lineNbr": 265,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-10T22:46:15Z",
      "side": 1,
      "message": "(style) I am not sold on the benefit of vertically aligning the \u0027?\u0027 operator. Especially if you don\u0027t also vertically align the \u0027:\u0027 operator.",
      "range": {
        "startLine": 265,
        "startChar": 22,
        "endLine": 265,
        "endChar": 23
      },
      "revId": "97b79885539344ed4a967cffe636255637fa9539",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b825fee2_da2af8c2",
        "filename": "src/filters.c",
        "patchSetId": 1
      },
      "lineNbr": 390,
      "author": {
        "id": 1019048
      },
      "writtenOn": "2021-06-11T08:16:14Z",
      "side": 1,
      "message": "nit: useless double check on the first character",
      "range": {
        "startLine": 385,
        "startChar": 8,
        "endLine": 390,
        "endChar": 26
      },
      "revId": "97b79885539344ed4a967cffe636255637fa9539",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53761621_b4be01f9",
        "filename": "src/filters.c",
        "patchSetId": 1
      },
      "lineNbr": 393,
      "author": {
        "id": 1019048
      },
      "writtenOn": "2021-06-11T08:16:14Z",
      "side": 1,
      "message": "minor: use NULL here, since you don\u0027t use the \"end\" string after",
      "range": {
        "startLine": 393,
        "startChar": 31,
        "endLine": 393,
        "endChar": 35
      },
      "revId": "97b79885539344ed4a967cffe636255637fa9539",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5787949c_eeec2bdf",
        "filename": "src/filters.c",
        "patchSetId": 1
      },
      "lineNbr": 398,
      "author": {
        "id": 1019048
      },
      "writtenOn": "2021-06-11T08:16:14Z",
      "side": 1,
      "message": "major: the \"while\" loop isn\u0027t necessary. Since the digits are supposed to be the last characters, and they should be in octal, you can simply call strtoul on the string, and verify if the pointer given back points to \u0027\\0\u0027 or not (in which case keeping the end string is necessary).",
      "range": {
        "startLine": 385,
        "startChar": 8,
        "endLine": 398,
        "endChar": 9
      },
      "revId": "97b79885539344ed4a967cffe636255637fa9539",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c703964_0832ce4b",
        "filename": "src/filters.c",
        "patchSetId": 1
      },
      "lineNbr": 433,
      "author": {
        "id": 1019048
      },
      "writtenOn": "2021-06-11T08:16:14Z",
      "side": 1,
      "message": "style: do not break the comment line on user-visible strings, as explained here https://github.com/cea-hpc/robinhood/blob/v4/doc/coding-style.rst#maximum-line-length",
      "range": {
        "startLine": 432,
        "startChar": 27,
        "endLine": 433,
        "endChar": 52
      },
      "revId": "97b79885539344ed4a967cffe636255637fa9539",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ff3fde8_b6f5e985",
        "filename": "tests/test_perm.sh",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-10T22:46:15Z",
      "side": 1,
      "message": "(style) Could you rename the file to use \u0027.bash\u0027 as the extension. Makes it clear that this isn\u0027t just a shell script and makes it legitimate to use bash-isms.",
      "revId": "97b79885539344ed4a967cffe636255637fa9539",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "594a418e_5f066df5",
        "filename": "tests/test_perm.sh",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-10T22:46:15Z",
      "side": 1,
      "message": "(minor) I recently discovered, at a cost, that \"/usr/bin/env bash\" makes for a better shebang, because of things like software collections on Centos or things like that.",
      "range": {
        "startLine": 1,
        "startChar": 2,
        "endLine": 1,
        "endChar": 11
      },
      "revId": "97b79885539344ed4a967cffe636255637fa9539",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fd3b9dd_849977e0",
        "filename": "tests/test_perm.sh",
        "patchSetId": 1
      },
      "lineNbr": 3,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-10T22:46:15Z",
      "side": 1,
      "message": "(question) I didn\u0027t know about command until today. I think I get what it does (at least more or less). Could you explain why it\u0027s useful in this context, please?",
      "range": {
        "startLine": 3,
        "startChar": 5,
        "endLine": 3,
        "endChar": 12
      },
      "revId": "97b79885539344ed4a967cffe636255637fa9539",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d55359f_c9c21555",
        "filename": "tests/test_perm.sh",
        "patchSetId": 1
      },
      "lineNbr": 3,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2021-06-11T08:18:33Z",
      "side": 1,
      "message": "Do you mean explaining it in the code ? I\u0027ll explain it here as well in case that\u0027s you meant. The point of command here is to test whether rbh-sync is installed on the system or not so that the tests can be executed because rbh-sync is an independant project from rbh-find.",
      "parentUuid": "6fd3b9dd_849977e0",
      "range": {
        "startLine": 3,
        "startChar": 5,
        "endLine": 3,
        "endChar": 12
      },
      "revId": "97b79885539344ed4a967cffe636255637fa9539",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5fae3d88_93c03936",
        "filename": "tests/test_perm.sh",
        "patchSetId": 1
      },
      "lineNbr": 3,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-12T10:10:57Z",
      "side": 1,
      "message": "\u003e Do you mean explaining it in the code ?\n\nI meant here, on gerrit.\n\n\u003e The point of command here is to test whether rbh-sync is installed on the system or not\n\nAh, I missed the part where it was rbh-sync, and not rbh-find.\nWould you say `command -v` is better than `which`, and if so why?\n\nNo need to switch to `which` unless you find a compelling argument for it.\nI am just curious to know if I should update my practices.",
      "parentUuid": "0d55359f_c9c21555",
      "range": {
        "startLine": 3,
        "startChar": 5,
        "endLine": 3,
        "endChar": 12
      },
      "revId": "97b79885539344ed4a967cffe636255637fa9539",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02b4b0f3_dc95dde9",
        "filename": "tests/test_perm.sh",
        "patchSetId": 1
      },
      "lineNbr": 3,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2021-06-14T07:14:18Z",
      "side": 1,
      "message": "As far as I know, `command` is a builtin function, not an external program which I guess makes it less dependent on the system. And I think I read somewhere, but I don\u0027t have a compelling source, that some implementation of `which` can return 0 when the command fails.\n\nI don\u0027t think there is a huge difference between `which` and `command -v`.",
      "parentUuid": "5fae3d88_93c03936",
      "range": {
        "startLine": 3,
        "startChar": 5,
        "endLine": 3,
        "endChar": 12
      },
      "revId": "97b79885539344ed4a967cffe636255637fa9539",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1097b04f_86cb49a0",
        "filename": "tests/test_perm.sh",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-10T22:46:15Z",
      "side": 1,
      "message": "(minor) Alright, there is a lot to say, but it\u0027s getting late here, so I don\u0027t want to spend too much time on it. Overall, it\u0027s great that you took the time to write tests, I know I should have.\n\nSummarizing a bit, skipping over the minor stuff:\n\n- In most situations, you want to use \"@\" instead of \"*\" (eg. \"${array[@]}\") [0]\n- It\u0027s good practice to quote bash variables, unless you want to make it clear that the variable should never contain spaces or simply cannot (eg. when you declare an integer variable: `local -i var`)\n- I am seeing some for loops with indices that could probably become `for var in \"${array[@]}\"`\n- Ideally, when it comes to temporary files, it\u0027s better to generate the file with `mktemp` as it protects you from tests hysteresis (when the previous test run affects the next one) or unfortunate setups (when a user just happens to have a file like that in their filesystem).\n- The previous point applies to any persistent resources.\n- The tests look like they require a running mongodb server on localhost. It\u0027s not too bad because we don\u0027t have tests yet anyway, so we\u0027re trading \"no tests at all\" vs. \"a few tests that don\u0027t work unless you have the right setup\". Still, that\u0027s not great.\n\n----------\n\nIf you\u0027re into bash, I spent some time writing a test harness a few years back [1]. I meant to use it in robinhood but never took the time to do it. Feel free to ignore this part of the comment as not even I know exactly how good a fit it would be in practice.\n\n[0] https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html\n[1] https://github.com/shypa/bunny",
      "revId": "97b79885539344ed4a967cffe636255637fa9539",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "557f688d_acf3b1a0",
        "filename": "tests/test_perm.sh",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2021-06-11T08:18:33Z",
      "side": 1,
      "message": "This patch comes after a patch I made on Lustre for lfs find. So the parsing of the mode string and the test are almost the same. The main differences being the use of rbh-sync and the filter construction.\n\nRegarding the for loops with indices, I\u0027m not a bash expert so there may be a way to handle iterating over multiple lists. Otherwise, I think they are mandatory.\n\nThe main point of this test was to make sure that the parsing is done properly as the symbolic representation is tricky to implement. It\u0027s a quick adaptation of Lustre\u0027s test that will surely need to be improved when a more rigorous testing framework will be in place.\n\nThese tests have been successfully run on a VM so I can leave the file there and remove the test from meson if you prefer for now.",
      "parentUuid": "1097b04f_86cb49a0",
      "revId": "97b79885539344ed4a967cffe636255637fa9539",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eef8bfec_315ce62c",
        "filename": "tests/test_perm.sh",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-12T10:10:57Z",
      "side": 1,
      "message": "\u003e I can leave the file there and remove the test from meson if you prefer for now.\n\nThat\u0027s a good suggestion. I like it.\n\n\u003e Regarding the for loops with indices, I\u0027m not a bash expert so there may be a way to handle iterating over multiple lists. Otherwise, I think they are mandatory.\n\nMy bad, missed that there were multiple lists being iterated on.",
      "parentUuid": "557f688d_acf3b1a0",
      "revId": "97b79885539344ed4a967cffe636255637fa9539",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}