{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "484d0f5e_771d448d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-09T16:24:40Z",
      "side": 1,
      "message": "(major) what you describe here is equivalent to (gnu-)find\u0027s behaviour. I\u0027d rather you summarized this into \"Implement the -size predicate just as gnu-find does, except for ...\" and focus on the differences.\n\nNotably:\n\n\u003e Bear in mind that the size is rounded up to the next unit. Therefore -size -1M is not  equivalent  to  -size -1048576c. The former only matches empty files, the latter matches files from 0 to 1,048,575 bytes.\n\nIf it\u0027s impossible, very impractical, or really silly to implement the exact same behavior, document why in the commit message and the README, otherwise, please stick to (gnu-)find\u0027s behavior.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 14,
        "endChar": 42
      },
      "revId": "3a00eaf5686618212bfbf45e02ecefd52365f849",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8821d633_ec7096ab",
        "filename": "src/filters.c",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-09T16:24:40Z",
      "side": 1,
      "message": "(nit++) \"stdlib\" comes after \"stdio\" in alphabetical order",
      "range": {
        "startLine": 18,
        "startChar": 10,
        "endLine": 18,
        "endChar": 15
      },
      "revId": "3a00eaf5686618212bfbf45e02ecefd52365f849",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68ad2a60_4182cc7e",
        "filename": "src/filters.c",
        "patchSetId": 2
      },
      "lineNbr": 209,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-09T16:24:40Z",
      "side": 1,
      "message": "(style) Is this any different than \"\"?",
      "range": {
        "startLine": 209,
        "startChar": 21,
        "endLine": 209,
        "endChar": 25
      },
      "revId": "3a00eaf5686618212bfbf45e02ecefd52365f849",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09453fae_ee2b390f",
        "filename": "src/filters.c",
        "patchSetId": 2
      },
      "lineNbr": 234,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-09T16:24:40Z",
      "side": 1,
      "message": "(major) we strive for a behaviour as close as possible to that of (gnu-)find.\n\n$ find -size \"1024c \"\nfind: invalid -size type ` \u0027\n\n$ ./sscanf-test \"1024c \"\nnum: 1024, suffix: \u0027c\u0027\n\n(defect) sscanf does not handle overflows:\n\n$ ./sscanf-to-uint64 18446744073709551616\n18446744073709551615\n\n--------------\n\nOther parts of robinhood v4 use strtoul() and/or strtoull().",
      "range": {
        "startLine": 231,
        "startChar": 4,
        "endLine": 234,
        "endChar": 36
      },
      "revId": "3a00eaf5686618212bfbf45e02ecefd52365f849",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3f0f52d_48f00b8b",
        "filename": "src/filters.c",
        "patchSetId": 2
      },
      "lineNbr": 241,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-09T16:24:40Z",
      "side": 1,
      "message": "(style) wrong line splitting:\n\n        error(EX_USAGE, 0,\n              \"arguments to -size should contain only one letter, suffix: \u0027%s\u0027\",\n              suffix);\n\nIn general we prefer not to break user-visible strings [0], although robinhood v4\u0027s coding style relaxes this and allows line breaks right before/after a conversion specifier (eg. `%s`, `%zu`, ...).\n\n[0] https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings\n[1] https://github.com/cea-hpc/robinhood/blob/v4/doc/coding-style.rst#maximum-line-length",
      "range": {
        "startLine": 240,
        "startChar": 27,
        "endLine": 241,
        "endChar": 41
      },
      "revId": "3a00eaf5686618212bfbf45e02ecefd52365f849",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}