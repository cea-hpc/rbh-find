{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "71690080_b8c2922f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-12T01:16:09Z",
      "side": 1,
      "message": "We don\u0027t get a nice inline output because only clang sees the error here, but the -1 Verified comes from the unitialized `unit_size\u0027 variable.",
      "revId": "87586f3fc23d22b96bf03c8896f0b2f7b03278ed",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ace215e9_e72f93a5",
        "filename": "src/filters.c",
        "patchSetId": 4
      },
      "lineNbr": 69,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-12T01:08:36Z",
      "side": 1,
      "message": "(major) I don\u0027t really like that. We\u0027re dealing with integers here. In python, if you want to make a `range()` inclusive on one side or the other, you simply adapt your bounds.\n\nIt would be nice to make RBH_FOP_GREATER_OR_EQUAL the operator for the \u0027low\u0027 bound though (just like in python), and adapt the code in the rest of the file. That should come in a separate commit though.",
      "range": {
        "startLine": 69,
        "startChar": 24,
        "endLine": 69,
        "endChar": 42
      },
      "revId": "87586f3fc23d22b96bf03c8896f0b2f7b03278ed",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea2f3979_0592c3ca",
        "filename": "src/filters.c",
        "patchSetId": 4
      },
      "lineNbr": 228,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-12T01:08:36Z",
      "side": 1,
      "message": "(minor) unsigned long is only guaranteed to be 32 bits longs, you want strtoull() for uint64_t",
      "range": {
        "startLine": 228,
        "startChar": 15,
        "endLine": 228,
        "endChar": 22
      },
      "revId": "87586f3fc23d22b96bf03c8896f0b2f7b03278ed",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "669472b1_466ad46b",
        "filename": "src/filters.c",
        "patchSetId": 4
      },
      "lineNbr": 234,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-12T01:08:36Z",
      "side": 1,
      "message": "(suggest)\n\n error(EX_USAGE, EOVERFLOW, \"invalid argument `%s\u0027 to -size\", _filesize);",
      "range": {
        "startLine": 233,
        "startChar": 8,
        "endLine": 234,
        "endChar": 25
      },
      "revId": "87586f3fc23d22b96bf03c8896f0b2f7b03278ed",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2dba6204_6b793d50",
        "filename": "src/filters.c",
        "patchSetId": 4
      },
      "lineNbr": 236,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-12T01:08:36Z",
      "side": 1,
      "message": "(nit) I wonder if we could merge this with the switch statement below... Let me give it a try:\n\n    switch (*suffix++) {\n    case \u0027T\u0027:\n        unit_size \u003d 1099511627776;\n        break;\n    case \u0027G\u0027:\n        unit_size \u003d 1073741824;\n        break;\n    case \u0027M\u0027:\n        unit_size \u003d 1048576;\n        break;\n    case \u0027k\u0027:\n        unit_size \u003d 1024;\n        break;\n    case \u0027\\0\u0027:\n        /* default suffix */\n        suffix--;\n        __attribute__((fallthrough));\n    case \u0027b\u0027:\n        unit_size \u003d 512;\n        break;\n    case \u0027w\u0027:\n        unit_size \u003d 2;\n        break;\n    case \u0027c\u0027:\n        unit_size \u003d 1;\n        break;\n    default:\n        error(EX_USAGE, 0, \"invalid argument `%s\u0027 to -size\", _filesize);\n    }\n\n    if (*suffix)\n        error(EX_USAGE, 0, \"invalid argument `%s\u0027 to -size\", _filesize);\n\nThat would work, wouldn\u0027t it?",
      "revId": "87586f3fc23d22b96bf03c8896f0b2f7b03278ed",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3fce4847_2e63cd36",
        "filename": "src/filters.c",
        "patchSetId": 4
      },
      "lineNbr": 247,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-12T01:08:36Z",
      "side": 1,
      "message": "(defect) That doesn\u0027t sound right... Shouldn\u0027t this be 1099511627776? (2 ^ 40)",
      "range": {
        "startLine": 247,
        "startChar": 20,
        "endLine": 247,
        "endChar": 33
      },
      "revId": "87586f3fc23d22b96bf03c8896f0b2f7b03278ed",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b126aba_3ac5e7d2",
        "filename": "src/filters.c",
        "patchSetId": 4
      },
      "lineNbr": 265,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-12T01:08:36Z",
      "side": 1,
      "message": "(defect) unit_size \u003d 1;",
      "revId": "87586f3fc23d22b96bf03c8896f0b2f7b03278ed",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d2cbf0b_bb5b123f",
        "filename": "src/filters.c",
        "patchSetId": 4
      },
      "lineNbr": 278,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2021-06-11T14:18:27Z",
      "side": 1,
      "message": "suggest: if I\u0027m right, operator can only be stricly_greater or lower_or_equal here. So I think you could simply write filesize -\u003d (unit_size * (RBH_FOP_LOWER_OR_EQUAL \u003d\u003d operator));",
      "range": {
        "startLine": 278,
        "startChar": 37,
        "endLine": 278,
        "endChar": 61
      },
      "revId": "87586f3fc23d22b96bf03c8896f0b2f7b03278ed",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcb8f04f_8e73945f",
        "filename": "src/filters.c",
        "patchSetId": 4
      },
      "lineNbr": 278,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-12T01:08:36Z",
      "side": 1,
      "message": "That\u0027s getting a bit tricky (ie. not very readable).\n\nHow about you do it like I did in timedelta2filter()?\n\n char operator \u003d *_filesize;\n\n switch (operator) {\n case \u0027-\u0027:\n case \u0027+\u0027:\n     _filesize++;\n }\n\n // parse _filesize with strtoull\n\n switch (operator) {\n case \u0027+\u0027:\n     // TODO\n case \u0027-\u0027:\n     // TODO\n default:\n     // TODO\n }",
      "parentUuid": "3d2cbf0b_bb5b123f",
      "range": {
        "startLine": 278,
        "startChar": 37,
        "endLine": 278,
        "endChar": 61
      },
      "revId": "87586f3fc23d22b96bf03c8896f0b2f7b03278ed",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b62396d2_cca38de5",
        "filename": "src/filters.c",
        "patchSetId": 4
      },
      "lineNbr": 281,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-12T01:08:36Z",
      "side": 1,
      "message": "(style) wrong indentation after a line break:\n\nEither:\n\n filter \u003d rbh_filter_compare_uint64_new(operator,\n                                        \u0026predicate2filter_field[PRED_SIZE], filesize);\n\nOr:\n\n filter \u003d rbh_filter_compare_uint64_new(\n         operator, \u0026predicate2filter_field[PRED_SIZE], filesize\n         );\n\nref: https://github.com/cea-hpc/robinhood/blob/v4/doc/coding-style.rst#how-to-break-lines",
      "range": {
        "startLine": 280,
        "startChar": 8,
        "endLine": 281,
        "endChar": 67
      },
      "revId": "87586f3fc23d22b96bf03c8896f0b2f7b03278ed",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}