{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b8ddad9e_130f7826",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-07T22:39:25Z",
      "side": 1,
      "message": "Can you document what -sort/-rsort do in the `Extra features` section of the README, please?",
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c63b051_07e6c310",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1019295
      },
      "writtenOn": "2021-07-08T15:29:04Z",
      "side": 1,
      "message": "Will do",
      "parentUuid": "b8ddad9e_130f7826",
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "460a255f_2e98a8cd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-08T22:57:41Z",
      "side": 1,
      "message": "It would be awesome if you could also add one or two sentences to the \"FS traversal vs. Backend filtering\" section of the README [0] which explain how in exchange for the discrepancy with (gnu-)find, we gain the ability to sort the output in a (potentially) efficient way. 😊\n\n[0] https://github.com/cea-hpc/rbh-find#fs-traversal-vs-backend-filtering",
      "parentUuid": "1c63b051_07e6c310",
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08cd362c_5bdab7c0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1019295
      },
      "writtenOn": "2021-07-09T14:06:38Z",
      "side": 1,
      "message": "Will do",
      "parentUuid": "460a255f_2e98a8cd",
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6e29758_ab2897c9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-10T13:28:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "08cd362c_5bdab7c0",
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b7a1312_7331ab00",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-08T22:57:41Z",
      "side": 1,
      "message": "(nitpick) -sort/-rsort",
      "range": {
        "startLine": 7,
        "startChar": 14,
        "endLine": 7,
        "endChar": 19
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2698245f_c50c0bd5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1019295
      },
      "writtenOn": "2021-07-09T14:06:38Z",
      "side": 1,
      "message": "Will do",
      "parentUuid": "0b7a1312_7331ab00",
      "range": {
        "startLine": 7,
        "startChar": 14,
        "endLine": 7,
        "endChar": 19
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "014a0cf3_42b50b51",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-07T22:39:25Z",
      "side": 1,
      "message": "Hey, thanks for the patch! 😊\n\nI never intended rbh-find to support a sorting option, I am going to need to think about it.\n\nI don\u0027t think I will be very hard to convince, still, it\u0027d be nice to read your side of the story: why do you think we should add this feature to rbh-find when (gnu-)find does not support it? (this information should probably go into the commit message as well)\n\nI\u0027ll do a more thorough review later this week.",
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ac7c9c7f_5fd8279e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1019295
      },
      "writtenOn": "2021-07-08T15:29:04Z",
      "side": 1,
      "message": "Hi, thanks for the review!\n\nThis feature can make it possible to output data according to the size or the time of last access for example, to be able to identify better targets during migration policies.",
      "parentUuid": "014a0cf3_42b50b51",
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d40fd1fd_2f02bd2a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-08T22:57:41Z",
      "side": 1,
      "message": "Thanks!\n\nI guess I would add that the feature is likely missing from (gnu-)find because any implement of -sort/-rsort there would be, performance-wise, equivalent to:\n\n  $ find -printf \u0027\u003ccriterion\u003e \u003cname\u003e\\0\u0027 | sort -z | cut -zd\u0027 \u0027 -f2-\n\nThe added complexity of including a sorting algorithm in find is simply not worth that much.\n\nOn the other hand, rbh-find, whose backends are going to commonly be databases, has a real shot at providing better performance than that if, for example, the field used to sort fsentries is indexed.\n\nAlso, the complexity of the feature in rbh-find is much more limited than in (gnu-)find.",
      "parentUuid": "ac7c9c7f_5fd8279e",
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "099bcc94_8d748dbe",
        "filename": "include/parser.h",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-07T22:39:25Z",
      "side": 1,
      "message": "I feel like this is an opportunity to split this patch into several smaller patches. It really helps reviewers if a patch only really does one thing.",
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e431cf0_eb07e2ab",
        "filename": "include/parser.h",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 1019295
      },
      "writtenOn": "2021-07-08T15:29:04Z",
      "side": 1,
      "message": "Will do",
      "parentUuid": "099bcc94_8d748dbe",
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ecf0dbfb_d42a9959",
        "filename": "include/parser.h",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-10T13:28:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4e431cf0_eb07e2ab",
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff76a37f_56d80936",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-08T22:57:41Z",
      "side": 1,
      "message": "(style) \"array\" is a bit generic. How about \"order\", \"order_bys\", or \"sorts\"?",
      "range": {
        "startLine": 69,
        "startChar": 30,
        "endLine": 69,
        "endChar": 35
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46e8ee8e_167fccda",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-08T22:57:41Z",
      "side": 1,
      "message": "(minor) const struct",
      "range": {
        "startLine": 69,
        "startChar": 6,
        "endLine": 69,
        "endChar": 12
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9296a20f_261d2987",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-08T22:57:41Z",
      "side": 1,
      "message": "(style) Conversely, I\u0027d say \"sort_array_size\" is a bit too verbose. I personally like to use \"count\"... Which arguably is a bit generic, but that I\u0027d justify by saying that a `size_t count` when used right after an array in a function\u0027s prototype consistently means \"the array\u0027s size\", at least in the robinhood codebase.",
      "range": {
        "startLine": 69,
        "startChar": 44,
        "endLine": 69,
        "endChar": 59
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9ff59c0_11feab2b",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1019295
      },
      "writtenOn": "2021-07-09T14:06:38Z",
      "side": 1,
      "message": "Will do",
      "parentUuid": "ff76a37f_56d80936",
      "range": {
        "startLine": 69,
        "startChar": 30,
        "endLine": 69,
        "endChar": 35
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7593efc8_5c771b53",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1019295
      },
      "writtenOn": "2021-07-09T14:06:38Z",
      "side": 1,
      "message": "As the \"count\" variable already exists in some functions, is \"count_sorts\" right for you?",
      "parentUuid": "9296a20f_261d2987",
      "range": {
        "startLine": 69,
        "startChar": 44,
        "endLine": 69,
        "endChar": 59
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a93d193_05b4408a",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1019295
      },
      "writtenOn": "2021-07-09T14:06:38Z",
      "side": 1,
      "message": "Will do",
      "parentUuid": "46e8ee8e_167fccda",
      "range": {
        "startLine": 69,
        "startChar": 6,
        "endLine": 69,
        "endChar": 12
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "481e66c9_ffd7441d",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-10T13:28:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f9ff59c0_11feab2b",
      "range": {
        "startLine": 69,
        "startChar": 30,
        "endLine": 69,
        "endChar": 35
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a2bd35d2_4616e1fe",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-10T13:28:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2a93d193_05b4408a",
      "range": {
        "startLine": 69,
        "startChar": 6,
        "endLine": 69,
        "endChar": 12
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8e45bc0_30926839",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-10T13:28:10Z",
      "side": 1,
      "message": "I\u0027d prefer it the other way around: \"sorts_count\", but yes, sure. 👍",
      "parentUuid": "7593efc8_5c771b53",
      "range": {
        "startLine": 69,
        "startChar": 44,
        "endLine": 69,
        "endChar": 59
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95ac60cf_2417ee4c",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-08T22:57:41Z",
      "side": 1,
      "message": "(style) this seems unrelated to this patch.\n\nFor the record, the call to error() on l.122 prints a similar message, but even better, because we get the name of the option that is not yet implemented, and it\u0027s automatically printed on stderr rather than stdout.",
      "range": {
        "startLine": 112,
        "startChar": 8,
        "endLine": 114,
        "endChar": 18
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed73648c_ee72e795",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1019295
      },
      "writtenOn": "2021-07-09T14:06:38Z",
      "side": 1,
      "message": "Will do",
      "parentUuid": "95ac60cf_2417ee4c",
      "range": {
        "startLine": 112,
        "startChar": 8,
        "endLine": 114,
        "endChar": 18
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "33cfebde_2e838a35",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-10T13:28:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ed73648c_ee72e795",
      "range": {
        "startLine": 112,
        "startChar": 8,
        "endLine": 114,
        "endChar": 18
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fa5bfc2_bc07dc36",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-08T22:57:41Z",
      "side": 1,
      "message": "(style) same remark about the names",
      "range": {
        "startLine": 143,
        "startChar": 29,
        "endLine": 143,
        "endChar": 58
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dac179ee_410c0fc9",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-08T22:57:41Z",
      "side": 1,
      "message": "(minor) const struct",
      "range": {
        "startLine": 143,
        "startChar": 5,
        "endLine": 143,
        "endChar": 11
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "413b3cb8_60b5aca1",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 1019295
      },
      "writtenOn": "2021-07-09T14:06:38Z",
      "side": 1,
      "message": "Will do",
      "parentUuid": "2fa5bfc2_bc07dc36",
      "range": {
        "startLine": 143,
        "startChar": 29,
        "endLine": 143,
        "endChar": 58
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b03e7c62_11d0a883",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 1019295
      },
      "writtenOn": "2021-07-09T14:06:38Z",
      "side": 1,
      "message": "Will do",
      "parentUuid": "dac179ee_410c0fc9",
      "range": {
        "startLine": 143,
        "startChar": 5,
        "endLine": 143,
        "endChar": 11
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8a157049_55e7988d",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-10T13:28:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b03e7c62_11d0a883",
      "range": {
        "startLine": 143,
        "startChar": 5,
        "endLine": 143,
        "endChar": 11
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "197d1e25_bccde251",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 219,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-08T22:57:41Z",
      "side": 1,
      "message": "(nitpick++) array \u003dP",
      "range": {
        "startLine": 219,
        "startChar": 30,
        "endLine": 219,
        "endChar": 34
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff378e30_a13e218e",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 219,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-08T22:57:41Z",
      "side": 1,
      "message": "(minor) No, a predicate is a statement that affirms or denies something. In find\u0027s semantics, filtering options (-size 2G, -atime +2, ...) are called predicates.\n\nHere we have an array of filtering options, or an array of fields to sort fsentries against.",
      "range": {
        "startLine": 219,
        "startChar": 43,
        "endLine": 219,
        "endChar": 53
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ea19170_e0aae00d",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 219,
      "author": {
        "id": 1019295
      },
      "writtenOn": "2021-07-09T14:06:38Z",
      "side": 1,
      "message": "Will do",
      "parentUuid": "ff378e30_a13e218e",
      "range": {
        "startLine": 219,
        "startChar": 43,
        "endLine": 219,
        "endChar": 53
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d58ad9b6_c45e018b",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 219,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-10T13:28:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0ea19170_e0aae00d",
      "range": {
        "startLine": 219,
        "startChar": 43,
        "endLine": 219,
        "endChar": 53
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73e979de_1d58fb75",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 220,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-08T22:57:41Z",
      "side": 1,
      "message": "(style) the \\p directive sort of makes \"array\" a proper name, as if you called it \"Charles\". The same way you wouldn\u0027t say \"the size of the Charles\", we\u0027ll rather write \"the size of \\p array\".",
      "range": {
        "startLine": 220,
        "startChar": 40,
        "endLine": 220,
        "endChar": 43
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2aedf35_0ce52ca3",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 220,
      "author": {
        "id": 1019295
      },
      "writtenOn": "2021-07-09T14:06:38Z",
      "side": 1,
      "message": "Will do",
      "parentUuid": "73e979de_1d58fb75",
      "range": {
        "startLine": 220,
        "startChar": 40,
        "endLine": 220,
        "endChar": 43
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b167a9b_a7993f87",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 220,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-10T13:28:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d2aedf35_0ce52ca3",
      "range": {
        "startLine": 220,
        "startChar": 40,
        "endLine": 220,
        "endChar": 43
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a2e7651_fa90de44",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 229,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-08T22:57:41Z",
      "side": 1,
      "message": "(style) same remark about the names",
      "range": {
        "startLine": 229,
        "startChar": 42,
        "endLine": 229,
        "endChar": 72
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "779074a3_90b5b886",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 229,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-08T22:57:41Z",
      "side": 1,
      "message": "(minor) const struct",
      "range": {
        "startLine": 229,
        "startChar": 17,
        "endLine": 229,
        "endChar": 23
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35cbdf33_392c69e0",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 229,
      "author": {
        "id": 1019295
      },
      "writtenOn": "2021-07-09T14:06:38Z",
      "side": 1,
      "message": "Will do",
      "parentUuid": "779074a3_90b5b886",
      "range": {
        "startLine": 229,
        "startChar": 17,
        "endLine": 229,
        "endChar": 23
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "555acb9e_3cb3ecbc",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 229,
      "author": {
        "id": 1019295
      },
      "writtenOn": "2021-07-09T14:06:38Z",
      "side": 1,
      "message": "Will do",
      "parentUuid": "9a2e7651_fa90de44",
      "range": {
        "startLine": 229,
        "startChar": 42,
        "endLine": 229,
        "endChar": 72
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "688d93f2_479ebe8f",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 229,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-10T13:28:10Z",
      "side": 1,
      "message": "That\u0027s my bad, this one shouldn\u0027t be made const.\n\nI guess the implications of using or not using const are a bit complex...\nThe best reference I can give would be the C standard [0], section 6.7.3, which arguably is a bit dry to read.\n\n[0] https://web.archive.org/web/20181230041359if_/http://www.open-std.org/jtc1/sc22/wg14/www/abq/c17_updated_proposed_fdis.pdf\n\nSimplifying quite a bit, when you use a function to which you pass a pointer to a \"const \u003csometype\u003e\", you can expect that function not to modify the memory the pointer points at. Conversely, when you write a function and declare it to accept a pointer to a \"const \u003csometype\u003e\", you should treat the memory the pointer points at as immutable.\n\nFor example:\n\n static void\n my_func(const char *string)\n {\n     string[0] \u003d \u0027a\u0027; // invalid\n }\n\nAnd the other way around:\n\n static void\n blackbox(char *string);\n\n static const char *MY_STRING \u003d \"Hello World\";\n\n int\n main()\n {\n     backbox(MY_STRING); // invalid\n }\n\n-------\n\nA good example to grasp how const works and doesn\u0027t work:\n\n struct Point {\n     int x;\n     int y;\n };\n\n struct Line {\n     struct Point *start;\n     struct Point *end;\n };\n\n static void\n test(const struct Line *line)\n {\n     line-\u003estart \u003d NULL; // invalid\n     line-\u003estart.x \u003d 10; // valid\n }\n\nTo make the second assignment in test() invalid, `struct Line` should have been defined as:\n\n struct Line {\n     const struct Point *start;\n     const struct Point *end;\n };\n\nOr:\n\n struct Line {\n     struct Point start;\n     struct Point end;\n };",
      "parentUuid": "35cbdf33_392c69e0",
      "range": {
        "startLine": 229,
        "startChar": 17,
        "endLine": 229,
        "endChar": 23
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55a9daf4_57d7d851",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 302,
      "author": {
        "id": 1019048
      },
      "writtenOn": "2021-07-07T12:45:03Z",
      "side": 1,
      "message": "typo: remove space",
      "range": {
        "startLine": 302,
        "startChar": 67,
        "endLine": 302,
        "endChar": 68
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bd762162_5b85c99f",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 302,
      "author": {
        "id": 1019295
      },
      "writtenOn": "2021-07-07T13:01:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "55a9daf4_57d7d851",
      "range": {
        "startLine": 302,
        "startChar": 67,
        "endLine": 302,
        "endChar": 68
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e6889827_d86f47db",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 302,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-07T22:39:25Z",
      "side": 1,
      "message": "I feel it\u0027s nicer if you only mark a comment as \"Done\" and resolved if you already uploaded the code that goes with it, otherwise it\u0027s really easy to forget to push the update later on.\n\nThe gatekeeper might end up merging the patch before you get your latest version out. If you leave the comment unresolved, the gatekeeper gets a nice warning.\n\nIf you don\u0027t want to push the code right away but you still want your reviewer to know that you addressed their comments, you can use \"Will do\" instead of \"Done\" (without checking the resolved box).\n\nIf you just don\u0027t want to forget to post comments on gerrit, there is an option in your user profile you can check to automatically publish comments when you upload a newer patchset.",
      "parentUuid": "bd762162_5b85c99f",
      "range": {
        "startLine": 302,
        "startChar": 67,
        "endLine": 302,
        "endChar": 68
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb1aa619_d2c78be5",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 302,
      "author": {
        "id": 1019295
      },
      "writtenOn": "2021-07-08T15:29:04Z",
      "side": 1,
      "message": "Okay, thanks for all these recomendations.",
      "parentUuid": "e6889827_d86f47db",
      "range": {
        "startLine": 302,
        "startChar": 67,
        "endLine": 302,
        "endChar": 68
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48763298_54ed45b3",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 349,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-08T22:57:41Z",
      "side": 1,
      "message": "neat! 👍",
      "range": {
        "startLine": 347,
        "startChar": 12,
        "endLine": 349,
        "endChar": 41
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5454dfec_2cfa40bb",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 351,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-08T22:57:41Z",
      "side": 1,
      "message": "(typo) an",
      "range": {
        "startLine": 351,
        "startChar": 21,
        "endLine": 351,
        "endChar": 22
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f696105_96683442",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 351,
      "author": {
        "id": 1019295
      },
      "writtenOn": "2021-07-09T14:06:38Z",
      "side": 1,
      "message": "Will do",
      "parentUuid": "5454dfec_2cfa40bb",
      "range": {
        "startLine": 351,
        "startChar": 21,
        "endLine": 351,
        "endChar": 22
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc99be3b_7171f73f",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 351,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-10T13:28:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1f696105_96683442",
      "range": {
        "startLine": 351,
        "startChar": 21,
        "endLine": 351,
        "endChar": 22
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e080593e_d9416d1e",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 355,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-08T22:57:41Z",
      "side": 1,
      "message": "(defect) this is not correct\n\n  $ rbh-find -rsort name \\( -sort name -print \\) -print\n\nShould output the name of each fsentry once, in a sorted order, and then once again, in a reverse-sorted order. IIUC, your implementation will output each fsentry twice in the same order.\n\nYou can have a look at how `_filter` and `filter` are used in this function. I expect you will need a similar approach to implement the correct behavior.",
      "range": {
        "startLine": 355,
        "startChar": 13,
        "endLine": 355,
        "endChar": 18
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5a4b34b_94f2ad1b",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 355,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-08T22:57:41Z",
      "side": 1,
      "message": "(style) trailing space",
      "range": {
        "startLine": 355,
        "startChar": 72,
        "endLine": 355,
        "endChar": 73
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a362209_dc7f6e7a",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 355,
      "author": {
        "id": 1019295
      },
      "writtenOn": "2021-07-09T14:06:38Z",
      "side": 1,
      "message": "I managed to modify it so that it output the name of each fsentry once in sorted order and then again in reverse sorted order.\nHowever, comparing with (gnu-)find it showed a difference, which is that (gnu-)find takes into account what\u0027s to the left of the parenthesis.\nFor example with (gnu-)find:\n $ find \\( -print \\) -type f -print\n   /\n   /a.txt\n   /a.txt\n   /b.txt\n   /b.txt\n $ find -type f \\( -print \\) -print\n   /a.txt\n   /a.txt\n   /b.txt\n   /b.txt\n\nAnd with rbh-find:\n $ rbh-find \\( -print \\) -type f -print\n   /b.txt\n   /\n   /a.txt\n   /b.txt\n   /a.txt\n $ rbh-find -type f \\( -print \\) -print\n   /b.txt\n   /\n   /a.txt\n   /b.txt\n   /a.txt\n\nSo, do I need to change the sort to take into account what\u0027s to the left of the parenthesis like (gnu-)find or leave it like that?",
      "parentUuid": "e080593e_d9416d1e",
      "range": {
        "startLine": 355,
        "startChar": 13,
        "endLine": 355,
        "endChar": 18
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b87d4fd_2f49b415",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 355,
      "author": {
        "id": 1019295
      },
      "writtenOn": "2021-07-09T14:06:38Z",
      "side": 1,
      "message": "Will do",
      "parentUuid": "c5a4b34b_94f2ad1b",
      "range": {
        "startLine": 355,
        "startChar": 72,
        "endLine": 355,
        "endChar": 73
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b69ee577_f1e0c4ad",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 355,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-10T13:28:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0b87d4fd_2f49b415",
      "range": {
        "startLine": 355,
        "startChar": 72,
        "endLine": 355,
        "endChar": 73
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d04c36ac_3e0b680a",
        "filename": "rbh-find.c",
        "patchSetId": 2
      },
      "lineNbr": 355,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-10T13:28:10Z",
      "side": 1,
      "message": "\u003e \u003e   $ rbh-find -rsort name \\( -sort name -print \\) -print\n\u003e \u003e \n\u003e \u003e Should output the name of each fsentry once, in a sorted order, and then once again, in a reverse-sorted order. IIUC, your implementation will output each fsentry twice in the same order.\n\nI\u0027m so sorry, my example was wrong. 😞\n\n $ rbh-find -rsort name \\( -sort name -print \\) -print\n\nIs equivalent to:\n\n $ rbh-find -rsort name -sort name -print -print\n\nIn which case, of course \"-sort name\" overrides \"-rsort name\", and we end up with:\n\n $ rbh-find -sort name -print -print\n\nie. print fsentries ordered by name, twice.\n\n-----\n\nWe need something a bit more complicated to highlight the issue.\n\nTaking this tree of files/directories as an example:\n\n $ tree .\n .\n ├── dir-0\n │   └── file-0\n └── dir-1\n     └── file-1\n\n 2 directories, 2 files\n\nAnd assuming file-0 was last modified before file-1, I would expect the following:\n\n $ rbh-find -type d -sort name -print -o -type f -rsort mtime -print\n /\n /dir-0\n /dir-1\n /dir-1/file-1\n /dir-0/file-0\n\nie. \"-sort name\" only applies to the part left of the \"-o\".\n\n ---------------------------------------------------------------------------------\n\n\u003e For example with (gnu-)find:\n\u003e   ...\n\u003e \n\u003e And with rbh-find:\n\u003e   ...\n\nThat\u0027s a great (bug-)find! 😊\n\nI pushed a patch to fix this here: https://review.gerrithub.io/c/cea-hpc/rbh-find/+/520474\nYou should probably rebase your work on top of it.\n\n\u003e So, do I need to change the sort to take into account what\u0027s to the left of the parenthesis like (gnu-)find or leave it like that?\n\nYou should take what\u0027s to the left of the parenthesis into account, like (gnu-)find does.",
      "parentUuid": "6a362209_dc7f6e7a",
      "range": {
        "startLine": 355,
        "startChar": 13,
        "endLine": 355,
        "endChar": 18
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "603d82db_1538ce07",
        "filename": "src/filters.c",
        "patchSetId": 2
      },
      "lineNbr": 384,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-08T22:57:41Z",
      "side": 1,
      "message": "(minor) considering the function exits on error and otherwise always increments this value by one, I would rather the caller does the \u0027++\u0027 than pass a pointer here.",
      "range": {
        "startLine": 384,
        "startChar": 42,
        "endLine": 384,
        "endChar": 65
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13cbb13b_a3d7bde7",
        "filename": "src/filters.c",
        "patchSetId": 2
      },
      "lineNbr": 384,
      "author": {
        "id": 1019295
      },
      "writtenOn": "2021-07-09T14:06:38Z",
      "side": 1,
      "message": "Will do",
      "parentUuid": "603d82db_1538ce07",
      "range": {
        "startLine": 384,
        "startChar": 42,
        "endLine": 384,
        "endChar": 65
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d0dbe09_41e66c43",
        "filename": "src/filters.c",
        "patchSetId": 2
      },
      "lineNbr": 399,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-08T22:57:41Z",
      "side": 1,
      "message": "(defect) I disagree with the syntax -sort \u003cpredicate\u003e.\n\nI would expect:\n\n  $ rbh-find -sort iname\n\nTo sort fsentries based on their name, without taking the case into account, which it will with your implementation.\n\nAnd I expect:\n\n  $ rbh-find -sort amin\n\nWill confuse more than one user.\n\nAlso, robinhood\u0027s API allows you to sort on an xattr, which your implementation does not allow.\n\nI would rather you implement a separate \"field\" parser please.",
      "range": {
        "startLine": 390,
        "startChar": 4,
        "endLine": 399,
        "endChar": 19
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "169bfd91_18835164",
        "filename": "src/filters.c",
        "patchSetId": 2
      },
      "lineNbr": 399,
      "author": {
        "id": 1019295
      },
      "writtenOn": "2021-07-09T14:06:38Z",
      "side": 1,
      "message": "Will do",
      "parentUuid": "9d0dbe09_41e66c43",
      "range": {
        "startLine": 390,
        "startChar": 4,
        "endLine": 399,
        "endChar": 19
      },
      "revId": "57f9fad26db66815191e2d4878f406ff16639365",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}